---
interface Props {
  data: {
    name: string;
    date: string;
    url?: string;
  }[];
  locale: string;
}

const { data, locale } = Astro.props;

const pastGigsLimit = 4;
const slicedData = data.slice(0, pastGigsLimit);

const formatDate = (date: string) => {
  const [day, month, year] = date.split('/');
  const newDate = new Date(Number(year), Number(month) - 1, Number(day));
  return newDate.toLocaleDateString(locale.replace('_', '-'), {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  });
};

const sortedData = slicedData.sort((a, b) => {
  const dateA = new Date(formatDate(a.date));
  const dateB = new Date(formatDate(b.date));
  return dateB.getTime() - dateA.getTime();
});
---

{
  sortedData.map((gig, count) => {
    const formattedDate = formatDate(gig.date);
    const isLastGig = count === pastGigsLimit - 1;

    return (
      <>
        <li>
          {gig.url ? (
            <a href={gig.url} target="_blank">
              <span>{gig.name}</span>
            </a>
          ) : (
            <span>{gig.name}</span>
          )}
          <span>{formattedDate}</span>
        </li>
        <>{isLastGig && <li></li>}</>
      </>
    );
  })
}

<style>
  a {
    color: darkblue;
  }

  li {
    display: flex;
    justify-content: space-between;
    min-height: 48px;
    align-items: center;
  }

  button {
    border-color: black;
    border-radius: 6px;
    color: black;
    font-size: 15px;
    padding: 10px;
    width: 80%;
    margin: 0 auto;
    cursor: pointer;
  }
</style>
